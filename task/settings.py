"""
Django settings for task project.

Generated by 'django-admin startproject' using Django 4.2.

This file contains the settings and configuration for the Django project.
For more information, see the Django documentation:
https://docs.djangoproject.com/en/4.2/topics/settings/
"""

from pathlib import Path  # Importing Path for handling filesystem paths.
# Importing config to manage environment variables.
from decouple import config
import os  # Importing os for operating system dependent functionality.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Base directory of the project.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Secret key for cryptographic signing, loaded from environment variables.
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# Debug mode, should be False in production.
DEBUG = config('DEBUG', default=False, cast=bool)

# Hosts/domain names that are valid for this site.
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=lambda v: [
                       s.strip() for s in v.split(',')])  # List of allowed hosts.

# Application definition

INSTALLED_APPS = [
    'taskmaster',  # Custom app for the project.
    'psycopg2',  # PostgreSQL database adapter.
    'django.contrib.admin',  # Admin site.
    'django.contrib.auth',  # Authentication framework.
    'django.contrib.contenttypes',  # Content types framework.
    'django.contrib.sessions',  # Session framework.
    'django.contrib.messages',  # Messaging framework.
    'django.contrib.staticfiles',  # Static files framework.
    'rest_framework',  # Django REST framework for building APIs.
    'rest_framework_simplejwt',  # JWT authentication for REST framework.
    'drf_yasg',  # Swagger/OpenAPI documentation generator.
]

MIDDLEWARE = [
    # Security-related middleware.
    'django.middleware.security.SecurityMiddleware',
    # Session management middleware.
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',  # Common HTTP middleware.
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF protection middleware.
    # Authentication middleware.
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # Messaging middleware.
    'django.contrib.messages.middleware.MessageMiddleware',
    # Clickjacking protection middleware.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Custom middleware for handling timezones.
    'taskmaster.middleware.TimezoneMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # JWT-based authentication.
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

ROOT_URLCONF = 'task.urls'  # Root URL configuration module.

TEMPLATES = [
    {
        # Template engine backend.
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Directories for custom templates.
        'APP_DIRS': True,  # Enable template discovery in app directories.
        'OPTIONS': {
            'context_processors': [
                # Debug context processor.
                'django.template.context_processors.debug',
                # Request context processor.
                'django.template.context_processors.request',
                # Authentication context processor.
                'django.contrib.auth.context_processors.auth',
                # Messaging context processor.
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'task.wsgi.application'  # WSGI application entry point.

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Database engine.
        'NAME': config('DB_NAME'),  # Database name from environment variables.
        'USER': config('DB_USER'),  # Database user from environment variables.
        # Database password from environment variables.
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),  # Database host from environment variables.
        'PORT': config('DB_PORT'),  # Database port from environment variables.
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        # Prevents passwords similar to user attributes.
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # Enforces minimum password length.
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # Prevents common passwords.
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # Prevents fully numeric passwords.
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        # Custom validator to ensure password contains digits.
        'NAME': 'taskmaster.validators.ContainDigitValidator',
    },
    {
        # Custom validator to ensure password contains symbols.
        'NAME': 'taskmaster.validators.ContainSymbolValidator',
    },
    {
        # Custom validator to ensure password contains uppercase letters.
        'NAME': 'taskmaster.validators.UppercaseValidator',
    },
    {
        # Custom validator to ensure password contains lowercase letters.
        'NAME': 'taskmaster.validators.LowercaseValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# Internationalization settings
LANGUAGE_CODE = 'en-us'  # Default language code.
TIME_ZONE = 'UTC'  # Default time zone.
USE_I18N = True  # Enable internationalization.
USE_TZ = True  # Enable timezone support.

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Static files settings
STATIC_URL = 'static/'  # URL for serving static files.
# Directory for collecting static files.
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

# Default primary key field type
# Default type for primary key fields.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
