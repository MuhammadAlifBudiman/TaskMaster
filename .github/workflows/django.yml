# This file defines a GitHub Actions workflow for Continuous Integration (CI) of a Django project.

name: Django CI # The name of the workflow, displayed in the GitHub Actions UI.

on: # Specifies the events that trigger the workflow.
  push: # Trigger the workflow on push events.
    branches: ["main"] # Only trigger on pushes to the "main" branch.

  pull_request: # Trigger the workflow on pull request events.
    branches: ["main"] # Only trigger on pull requests targeting the "main" branch.

jobs: # Defines the jobs to run as part of the workflow.
  build: # A job named "build".
    runs-on: ubuntu-latest # Specifies the OS for the job runner.
    strategy: # Defines a strategy for running the job.
      max-parallel: 4 # Allows up to 4 jobs to run in parallel.
      matrix: # Defines a matrix of configurations to test.
        python-version: [3.8, 3.9, '3.10.x'] # Test against Python versions 3.8, 3.9, and 3.10.x.

    services: # Defines services required for the job.
      postgres: # Configures a PostgreSQL service.
        image: postgres:12 # Specifies the Docker image for PostgreSQL version 12.
        env: # Environment variables for the PostgreSQL service.
          POSTGRES_USER: ${{ secrets.DB_USER }} # PostgreSQL username from GitHub secrets.
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }} # PostgreSQL password from GitHub secrets.
          POSTGRES_DB: "taskmaster" # Name of the PostgreSQL database.
        ports: # Maps ports for the PostgreSQL service.
          - "5432:5432" # Maps port 5432 on the host to port 5432 in the container.

    steps: # Defines the steps to execute in the job.
      - uses: actions/checkout@v3 # Checks out the repository code.

      - name: Set up Python ${{ matrix.python-version }} # Sets up Python for the specified version.
        uses: actions/setup-python@v3 # Uses the setup-python action.
        with:
          python-version: ${{ matrix.python-version }} # Specifies the Python version to set up.

      - name: Install Dependencies # Installs the project dependencies.
        run: |
          python -m pip install --upgrade pip  # Upgrades pip to the latest version.
          pip install -r requirements.txt  # Installs dependencies from the requirements file.

      - name: Set up environment variables # Configures environment variables for the Django project.
        run: |
          echo "DB_NAME=taskmaster" >> .env  # Sets the database name.
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env  # Sets the database user from secrets.
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env  # Sets the database password from secrets.
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env  # Sets the database host from secrets.
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env  # Sets the database port from secrets.
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env  # Sets the Django secret key from secrets.
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env  # Sets the debug mode from secrets.
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env  # Sets the allowed hosts from secrets.

      - name: Run migration # Applies database migrations.
        run: |
          python manage.py makemigrations taskmaster  # Creates new migrations for the "taskmaster" app.
          python manage.py migrate  # Applies the migrations to the database.

      - name: Run Tests # Runs the Django tests.
        run: |
          python manage.py test  # Executes the Django test suite.
